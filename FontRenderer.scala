package com.example.render

import org.lwjgl.opengl.GL11._

object FontRenderer {
  val fontWidth = 8
  val fontHeight = 8

  // 簡単なビットマップフォントデータ（例として8x8の固定幅フォント）
  val fontData: Array[Array[Int]] = Array(
    Array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), // ' ' (space)
    Array(0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00), // '!'
    Array(0x6C, 0x6C, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00), // '"'
    Array(0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00), // '#'
    Array(0x18, 0x3E, 0x58, 0x3C, 0x1A, 0x7C, 0x18, 0x00), // '$'
    Array(0x00, 0x66, 0x6C, 0x18, 0x30, 0x66, 0x46, 0x00), // '%'
    Array(0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00), // '&'
    Array(0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00), // '''
    Array(0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00), // '('
    Array(0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00), // ')'
    Array(0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00), // '*'
    Array(0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00), // '+'
    Array(0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30), // ','
    Array(0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00), // '-'
    Array(0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00), // '.'
    Array(0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00), // '/'
    Array(0x3C, 0x66, 0x6E, 0x76, 0x66, 0x66, 0x3C, 0x00), // '0'
    Array(0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00), // '1'
    Array(0x3C, 0x66, 0x06, 0x1C, 0x30, 0x60, 0x7E, 0x00), // '2'
    Array(0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00), // '3'
    Array(0x0C, 0x1C, 0x3C, 0x6C, 0xFE, 0x0C, 0x0C, 0x00), // '4'
    Array(0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00), // '5'
    Array(0x3C, 0x66, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00), // '6'
    Array(0x7E, 0x66, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00), // '7'
    Array(0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00), // '8'
    Array(0x3C, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00), // '9'
    Array(0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00), // ':'
    Array(0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30), // ';'
    Array(0x0E, 0x1C, 0x38, 0x70, 0x38, 0x1C, 0x0E, 0x00), // '<'
    Array(0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00), // '='
    Array(0x70, 0x38, 0x1C, 0x0E, 0x1C, 0x38, 0x70, 0x00), // '>'
    Array(0x3C, 0x66, 0x06, 0x1C, 0x18, 0x00, 0x18, 0x00), // '?'
    Array(0x3C, 0x66, 0x6E, 0x6E, 0x60, 0x60, 0x3E, 0x00), // '@'
    Array(0x18, 0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x00), // 'A'
    Array(0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00), // 'B'
    Array(0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00), // 'C'
    Array(0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00), // 'D'
    Array(0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E, 0x00), // 'E'
    Array(0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x00), // 'F'
    Array(0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00), // 'G'
    Array(0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00), // 'H'
    Array(0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00), // 'I'
    Array(0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00), // 'J'
    Array(0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00), // 'K'
    Array(0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00), // 'L'
    Array(0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00), // 'M'
    Array(0x66, 0x76, 0x7E, 0x7E, 0x6E, 0x66, 0x66, 0x00), // 'N'
    Array(0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00), // 'O'
    Array(0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00), // 'P'
    Array(0x3C, 0x66, 0x66, 0x66, 0x66, 0x6E, 0x3C, 0x06), // 'Q'
    Array(0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66, 0x00), // 'R'
    Array(0x3C, 0x66, 0x30, 0x1C, 0x06, 0x66, 0x3C, 0x00), // 'S'
    Array(0x7E, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x3C, 0x00), // 'T'
    Array(0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00), // 'U'
    Array(0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00), // 'V'
    Array(0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00), // 'W'
    Array(0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00), // 'X'
    Array(0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x3C, 0x00), // 'Y'
    Array(0x7F, 0x63, 0x31, 0x18, 0x0C, 0x46, 0x7F, 0x00)  // 'Z'
  )

  def drawChar(x: Float, y: Float, c: Char): Unit = {
    val index = c - ' '
    if (index < 0 || index >= fontData.length) return

    val data = fontData(index)
    glColor3f(1.0f, 1.0f, 1.0f)
    glBegin(GL_QUADS)
    for (i <- 0 until fontHeight) {
      for (j <- 0 until fontWidth) {
        if ((data(i) & (1 << (fontWidth - 1 - j))) != 0) {
          glVertex2f(x + j, y + i)
          glVertex2f(x + j + 1, y + i)
          glVertex2f(x + j + 1, y + i + 1)
          glVertex2f(x + j, y + i + 1)
        }
      }
    }
    glEnd()
  }

  def drawString(x: Float, y: Float, str: String): Unit = {
    for (i <- str.indices) {
      drawChar(x + i * fontWidth, y, str(i))
    }
  }
}